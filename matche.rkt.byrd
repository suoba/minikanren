#lang racket

(require "minikanren.rkt")

(provide lambdae matche)

(define-syntax lambdae
  (syntax-rules ()
    ((_ (x ...) c c* ...)
     (lambda (x ...) (matche (quasiquote ((unquote x) ...)) (c c* ...) ())))))

(define-syntax exist*
  (syntax-rules ()
    ((_ (x ...) g0 g ...)
     (lambdag@ (a)
       (inc
         (let* ((x (var 'x)) ...)
           (bind* (g0 a) g ...)))))))

(define-syntax fresh*
  (syntax-rules ()
    ((_ (x ...) g0 g ...)
     (lambdag@ (a)
       (inc
         (let* ((x (nom 'x)) ...)
           (bind* (g0 a) g ...)))))))

(define-syntax matche
  (syntax-rules ()
    ((_ (f x ...) g* . cs)
     (let ((v (f x ...))) (matche v g* . cs)))
    ((_ v g* . cs) (mpat conde v (g* . cs) ()))))

(define-syntax mpat
  (syntax-rules (_ quote unquote unquote-splicing expand cons)
    ((_ co v () (l ...))  (co l ...))
    ((_ co v (pat) xs as ((g ...) . cs) (l ...))
     (mpat co v cs (l ... ((fresh* as (exist* xs (== pat v) g ...))))))
    ((_ co v ((__ g0 g ...) . cs) (l ...))
     (mpat co v cs (l ... ((exist () g0 g ...)))))
    ((_ co v (((unquote y) g0 g ...) . cs) (l ...))
     (mpat co v cs (l ... ((exist (y) (== y v) g0 g ...)))))
    ((_ co v (((unquote-splicing b) g0 g ...) . cs) (l ...))
     (mpat co v cs (l ... ((fresh (b) g0 g ...)))))
    ((_ co v ((pat g ...) . cs) ls)
     (mpat co v (pat expand) () () ((g ...) . cs) ls))
    ((_ co (__ expand . k) (x ...) as cs ls)
     (mpat co v ((unquote y) . k) (y x ...) as cs ls))
    ((_ co v ((unquote y) expand . k) (x ...) as cs ls)
     (mpat co v ((unquote y) . k) (y x ...) as cs ls))
    ((_ co v ((unquote-splicing b) expand . k) xs (a ...) cs ls) 
     (mpat co v ((unquote b) . k) xs (b a ...) cs ls))
    ((_ co v ((quote c) expand . k) xs as cs ls)s
     (mpat co v (c . k) xs as cs ls))
    ((_ co v ((a . d) expand . k) xs as cs ls)
     (mpat co v (d expand a expand cons . k) xs as cs ls))
    ((_ co v (d a expand cons . k) xs as cs ls)
     (mpat co v (a expand d cons . k) xs as cs ls))
    ((_ co v (a d cons . k) xs as cs ls)
     (mpat co v ((a . d) . k) xs as cs ls))
    ((_ co v (c expand . k) xs as cs ls)
     (mpat co v (c . k) xs as cs ls))))